#!/bin/bash
set -euo pipefail

# Dossiers / chemins
GAMEDIR="${GAMEDIR:-/opt/sandstorm}"
CFGDIR="${GAMEDIR}/Insurgency/Saved/Config/LinuxServer"
GAMEINI="${CFGDIR}/Game.ini"
MAPCYCLE="${GAMEDIR}/Insurgency/Config/Server/MapCycle.txt"
STEAMCMDDIR="${STEAMCMDDIR:-/home/steam/steamcmd}"
APPID="${APPID:-581330}"

# Valeurs par défaut
: "${AUTO_UPDATE:=1}"
: "${PORT:=27102}"
: "${QUERYPORT:=27131}"
: "${BEACONPORT:=15000}"
: "${RCON_PASSWORD:=ChangeMe!}"
: "${SS_HOSTNAME:=Chourmovs ISS}"
: "${SS_MAXPLAYERS:=16}"

# Map / mode
: "${SS_MAP:=Farmhouse}"
: "${SS_SCENARIO:=Scenario_Farmhouse_Checkpoint_Security}"
: "${SS_GAME_MODE:=Checkpoint}"

# Bots etc. (tes variables déjà définies plus loin, inchangées)

echo "▶️ Starting Insurgency Sandstorm Dedicated Server...

  PORT=${PORT} | QUERYPORT=${QUERYPORT} | BEACONPORT=${BEACONPORT}
  RCON_PASSWORD=******** | AUTO_UPDATE=${AUTO_UPDATE}
  MAP=${SS_MAP} | SCENARIO=${SS_SCENARIO} | MODE=${SS_GAME_MODE}
"

# ── Création robuste des dossiers nécessaires (avec messages utiles)
need_paths=(
  "${GAMEDIR}"
  "${GAMEDIR}/Insurgency"
  "${GAMEDIR}/Insurgency/Saved"
  "${GAMEDIR}/Insurgency/Saved/SaveGames"
  "${GAMEDIR}/Insurgency/Config/Server"
  "${CFGDIR}"
)

for p in "${need_paths[@]}"; do
  if [ ! -d "$p" ]; then
    if mkdir -p "$p" 2>/dev/null; then
      :
    else
      echo "❌ Permission refusée pour créer: $p"
      echo "   ➜ Vérifie que le volume est possédé par uid:gid 1000:1000."
      echo "   ➜ Astuce: exécute le service 'fixperms' (voir stack) ou la commande one-shot chown."
      sleep 3
      exit 1
    fi
  fi
done

# Sécurité: refuser de continuer si on ne peut pas écrire
echo "write-test" > "${GAMEDIR}/.writetest" 2>/dev/null || {
  echo "❌ Impossible d'écrire dans ${GAMEDIR} (problème de permissions)."
  echo "   ➜ Corrige les droits (chown -R 1000:1000) puis relance."
  exit 1
}
rm -f "${GAMEDIR}/.writetest"

# ── Auto-update SteamCMD (avec retries anti-0x602)
if [ "${AUTO_UPDATE}" = "1" ]; then
  echo "📥 Updating server via SteamCMD..."
  tries=4
  i=1
  while [ $i -le $tries ]; do
    if "${STEAMCMDDIR}/steamcmd.sh" +@sSteamCmdForcePlatformType linux \
        +force_install_dir "${GAMEDIR}" \
        +login anonymous \
        +app_update "${APPID}" validate \
        +quit; then
      break
    fi
    echo "⚠️  SteamCMD validate failed (try $i/${tries}). Retrying without validate..."
    if "${STEAMCMDDIR}/steamcmd.sh" +@sSteamCmdForcePlatformType linux \
        +force_install_dir "${GAMEDIR}" \
        +login anonymous \
        +app_update "${APPID}" \
        +quit; then
      break
    fi
    if [ $i -eq $tries ]; then
      echo "❌ SteamCMD update failed after ${tries} tries — I will continue if the server files already exist."
      break
    fi
    sleep 5
    i=$((i+1))
  done
fi

# ── À partir d’ici, garde le reste de TON script (écriture MapCycle, Game.ini, lancement)


# ─────────────────────────────────────────
# (B) Génération MapCycle.txt
# ─────────────────────────────────────────
# SS_MAPCYCLE peut être une ou plusieurs lignes "Scenario_XXX"
# Ex: 
#   SS_MAPCYCLE="Scenario_Farmhouse_Checkpoint_Security
#   Scenario_Summit_Checkpoint_Security"
echo "🗺️  Writing MapCycle..."
{
  # Première ligne: "MapCycle=..."
  echo "# Generated by entrypoint"
  echo "# One scenario id per line is supported by Sandstorm dedicated"
  echo "${SS_MAPCYCLE}" | tr '\r' '\n' | sed '/^\s*$/d'
} > "${MAPCYCLE}"

# ─────────────────────────────────────────
# (C) Génération Game.ini orienté CHECKPOINT
# ─────────────────────────────────────────
echo "🧩 Writing Game.ini..."
cat > "${GAMEINI}" <<EOF
; ------------------------------------------------------------------
; Insurgency Sandstorm - Game.ini (orienté COOP / CHECKPOINT)
; NOTE: Lancer un scénario Checkpoint (ex: Scenario_Farmhouse_Checkpoint_Security)
;       pour que ces paramètres s'appliquent.
; ------------------------------------------------------------------

[/Script/Insurgency.INSGameMode]
; ===== QOL générique =====
bKillFeed=${SS_KILL_FEED}
bKillCamera=${SS_KILL_CAMERA}
bVoiceEnabled=${SS_VOICE_ENABLED}

; Friendly fire global (plutôt PVP ; en coop souvent ignoré selon le mode)
; On force la désactivation explicite comme demandé :
bAllowFriendlyFire=${SS_ALLOW_FF:-False}
; Échelle de dégâts FF si jamais activé côté serveur / autre mode :
FriendlyFireDamageScale=${SS_FRIENDLY_FIRE_SCALE:-0.0}

; Timings et limites
GameStartingIntermissionTime=${SS_INTERMISSION_TIME:-10}
RoundLimit=${SS_ROUND_LIMIT:-1}
RoundTime=${SS_ROUND_TIME}
PostRoundTime=${SS_POST_ROUND_TIME}

; ===== NE RIEN DÉFINIR ICI sur les bots pour CHECKPOINT =====
; (NumBots, BotQuota, BotDifficulty laissés absents pour éviter les conflits)

[/Script/Insurgency.INSCheckpointGameMode]
; ===== ENNEMIS (COOP) =====
; IMPORTANT: pas de NumBots/BotQuota/BotDifficulty ici.
bBots=True
MinimumEnemies=${SS_MIN_ENEMIES:-20}
MaximumEnemies=${SS_MAX_ENEMIES:-20}
SoloEnemies=${SS_SOLO_ENEMIES:-0}

; Options utiles / stables en coop
bBotsUseVehicleInsertion=${SS_BOTS_USE_VEHICLE:-True}
RespawnDPR=${SS_RESPAWN_DPR:-0.5}
DefendCaptureTime=${SS_DEFEND_CAPTURE_TIME:-45}

; Supply (facultatif en coop ; mets-les si tu les utilises vraiment)
; InitialSupply=${SS_INITIAL_SUPPLY}
; MaxSupply=${SS_MAX_SUPPLY}

[/Script/Insurgency.INSCoopMode]
; ===== BOTS ALLIÉS & COMPORTEMENTS =====
bKickIdleSpectators=${SS_KICK_IDLE_SPECTATORS:-True}
FriendlyBotQuota=${SS_FRIENDLY_BOT_QUOTA:-0}   ; mets 6 si tu veux des alliés

; ===== (Optionnel) Section avancée =====
; ⚠️ Évite les mutators qui réduisent la pop (p.ex. Hardcore selon version)
; Mutators=Hardcore,NoResupply
; ObjectiveCaptureSpeedScale=1.0
; TeamKillLimit=3
; bDeadSayAll=true
EOF

echo "✅ Game.ini écrit (oriented Checkpoint). Pense à redémarrer le serveur."


# ─────────────────────────────────────────
# (D) Lancement serveur
# ─────────────────────────────────────────
cd "${GAMEDIR}/Insurgency/Binaries/Linux"

# Construction de la ligne de lancement
LAUNCH_MAP="${SS_MAP}?Scenario=${SS_SCENARIO}?MaxPlayers=${SS_MAXPLAYERS}"

exec ./InsurgencyServer-Linux-Shipping \
  "${LAUNCH_MAP}" \
  -hostname="${SS_HOSTNAME}" \
  -Port="${PORT}" -QueryPort="${QUERYPORT}" -BeaconPort="${BEACONPORT}" \
  -Rcon \
  -RconPassword="${RCON_PASSWORD}" \
  -log
